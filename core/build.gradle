apply plugin: 'com.android.library'
apply plugin: 'bintray-release'
apply plugin: 'jacoco'
apply plugin: 'com.novoda.build-properties'

buildProperties {
    cli {
        using(project)
    }
    bintray {
        def bintrayCredentials = {
            boolean isDryRun = cli['dryRun'].or(true).boolean
            if (isDryRun) {
                return ['bintrayOrg': 'n/a', 'bintrayRepo': 'n/a', 'bintrayUser': 'n/a', 'bintrayKey': 'n/a']
            }

            boolean bintrayPropertiesFileExists = "${System.getenv('BINTRAY_PROPERTIES')}" != "null"
            if (bintrayPropertiesFileExists) {
                new File("${System.getenv('BINTRAY_PROPERTIES')}")
            }

            String bintrayOrg = cli['bintrayOrg'].string
            String bintrayRepo = cli['bintrayRepo'].string
            String bintrayUser = cli['bintrayUser'].string
            String bintrayKey = cli['bintrayKey'].string

            return ['bintrayOrg': "${bintrayOrg}", 'bintrayRepo': "${bintrayRepo}", 'bintrayUser': "${bintrayUser}", 'bintrayKey': "${bintrayKey}"]
        }
        using(bintrayCredentials()).or(cli)
        description = '''This should contain the following properties:
                        - bintrayOrg: name of the Bintray organisation to deploy the artifacts to
                        - bintrayRepo: name of the repo of the organisation to deploy the artifacts to
                        - bintrayUser: name of the account used to deploy the artifacts
                        - bintrayKey: API key of the account used to deploy the artifacts
        '''.stripIndent()
    }
    publish {
        def generateVersion = {
            def today = new Date().getTime()
            boolean isSnapshot = cli['bintraySnapshot'].or(false).boolean
            if (isSnapshot) {
                return "DEVELOP-${today}"
            }
            boolean isExperimental = cli['bintrayExperimental'].or(false).boolean
            if (isExperimental) {
                return "EXPERIMENTAL-${today}"
            }
            return version
        }
        using(['version': "${generateVersion()}"])
                .or(buildProperties.bintray)
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    defaultConfig {
        minSdkVersion 16
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    lintOptions {
        lintConfig teamPropsFile('static-analysis/lint-config.xml')
        abortOnError true
        warningsAsErrors true
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'com.google.android.exoplayer:exoplayer-core:2.10.5'
    implementation 'com.google.android.exoplayer:exoplayer-hls:2.10.5'
    implementation 'com.google.android.exoplayer:exoplayer-dash:2.10.5'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.10.5'

    implementation 'androidx.annotation:annotation:1.1.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.easytesting:fest-assert-core:2.0M10'
}

publish {
    userOrg = buildProperties.publish['bintrayOrg'].string
    repoName = buildProperties.publish['bintrayRepo'].string
    groupId = 'com.novoda'
    artifactId = 'no-player'
    version = buildProperties.publish['version'].string
    bintrayUser = buildProperties.publish['bintrayUser'].string
    bintrayKey = buildProperties.publish['bintrayKey'].string
    publishVersion = version
    uploadName = 'no-player'
    desc = 'player to wrap players'
    website = 'https://github.com/novoda/no-player'
}
